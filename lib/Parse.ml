(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_proto"

let parse_source_string ?src_file contents =
  let ts_parser = create_parser () in
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  let ts_parser = create_parser () in
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
]

let children_regexps : (string * Run.exp option) list = [
  "key_type",
  Some (
    Alt [|
      Token (Literal "int32");
      Token (Literal "int64");
      Token (Literal "uint32");
      Token (Literal "uint64");
      Token (Literal "sint32");
      Token (Literal "sint64");
      Token (Literal "fixed32");
      Token (Literal "fixed64");
      Token (Literal "sfixed32");
      Token (Literal "sfixed64");
      Token (Literal "bool");
      Token (Literal "string");
    |];
  );
  "empty_statement", None;
  "octal_lit", None;
  "syntax",
  Some (
    Seq [
      Token (Literal "syntax");
      Token (Literal "=");
      Token (Literal "\"proto3\"");
      Token (Literal ";");
    ];
  );
  "decimal_lit", None;
  "imm_tok_prec_p1_pat_3a2a380", None;
  "false", None;
  "hex_lit", None;
  "float_lit", None;
  "imm_tok_prec_p1_pat_dc28280", None;
  "escape_sequence", None;
  "true", None;
  "comment", None;
  "identifier", None;
  "int_lit",
  Some (
    Alt [|
      Token (Name "decimal_lit");
      Token (Name "octal_lit");
      Token (Name "hex_lit");
    |];
  );
  "string",
  Some (
    Alt [|
      Seq [
        Token (Literal "\"");
        Repeat (
          Alt [|
            Token (Name "imm_tok_prec_p1_pat_3a2a380");
            Token (Name "escape_sequence");
          |];
        );
        Token (Literal "\"");
      ];
      Seq [
        Token (Literal "'");
        Repeat (
          Alt [|
            Token (Name "imm_tok_prec_p1_pat_dc28280");
            Token (Name "escape_sequence");
          |];
        );
        Token (Literal "'");
      ];
    |];
  );
  "bool",
  Some (
    Alt [|
      Token (Name "true");
      Token (Name "false");
    |];
  );
  "full_ident",
  Some (
    Seq [
      Token (Name "identifier");
      Opt (
        Repeat (
          Seq [
            Token (Literal ".");
            Token (Name "identifier");
          ];
        );
      );
    ];
  );
  "enum_name", Some (Token (Name "identifier"););
  "field_names",
  Some (
    Seq [
      Token (Name "identifier");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "identifier");
        ];
      );
    ];
  );
  "rpc_name", Some (Token (Name "identifier"););
  "message_name", Some (Token (Name "identifier"););
  "service_name", Some (Token (Name "identifier"););
  "message_or_enum_type",
  Some (
    Seq [
      Opt (
        Token (Literal ".");
      );
      Repeat (
        Seq [
          Token (Name "identifier");
          Token (Literal ".");
        ];
      );
      Token (Name "identifier");
    ];
  );
  "field_number", Some (Token (Name "int_lit"););
  "range",
  Some (
    Seq [
      Token (Name "int_lit");
      Opt (
        Seq [
          Token (Literal "to");
          Alt [|
            Token (Name "int_lit");
            Token (Literal "max");
          |];
        ];
      );
    ];
  );
  "import",
  Some (
    Seq [
      Token (Literal "import");
      Opt (
        Alt [|
          Token (Literal "weak");
          Token (Literal "public");
        |];
      );
      Token (Name "string");
      Token (Literal ";");
    ];
  );
  "option_name",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Seq [
          Token (Literal "(");
          Token (Name "full_ident");
          Token (Literal ")");
        ];
      |];
      Repeat (
        Seq [
          Token (Literal ".");
          Token (Name "identifier");
        ];
      );
    ];
  );
  "block_lit",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Seq [
          Token (Name "identifier");
          Opt (
            Token (Literal ":");
          );
          Alt [|
            Token (Name "constant");
            Seq [
              Token (Literal "[");
              Token (Name "constant");
              Repeat (
                Seq [
                  Token (Literal ",");
                  Token (Name "constant");
                ];
              );
              Token (Literal "]");
            ];
          |];
          Opt (
            Alt [|
              Token (Literal ",");
              Token (Literal ";");
            |];
          );
        ];
      );
      Token (Literal "}");
    ];
  );
  "constant",
  Some (
    Alt [|
      Token (Name "full_ident");
      Seq [
        Opt (
          Alt [|
            Token (Literal "-");
            Token (Literal "+");
          |];
        );
        Token (Name "int_lit");
      ];
      Seq [
        Opt (
          Alt [|
            Token (Literal "-");
            Token (Literal "+");
          |];
        );
        Token (Name "float_lit");
      ];
      Token (Name "string");
      Token (Name "bool");
      Token (Name "block_lit");
    |];
  );
  "package",
  Some (
    Seq [
      Token (Literal "package");
      Token (Name "full_ident");
      Token (Literal ";");
    ];
  );
  "type",
  Some (
    Alt [|
      Token (Literal "double");
      Token (Literal "float");
      Token (Literal "int32");
      Token (Literal "int64");
      Token (Literal "uint32");
      Token (Literal "uint64");
      Token (Literal "sint32");
      Token (Literal "sint64");
      Token (Literal "fixed32");
      Token (Literal "fixed64");
      Token (Literal "sfixed32");
      Token (Literal "sfixed64");
      Token (Literal "bool");
      Token (Literal "string");
      Token (Literal "bytes");
      Token (Name "message_or_enum_type");
    |];
  );
  "ranges",
  Some (
    Seq [
      Token (Name "range");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "range");
        ];
      );
    ];
  );
  "field_option",
  Some (
    Seq [
      Token (Name "option_name");
      Token (Literal "=");
      Token (Name "constant");
    ];
  );
  "enum_value_option",
  Some (
    Seq [
      Token (Name "option_name");
      Token (Literal "=");
      Token (Name "constant");
    ];
  );
  "option",
  Some (
    Seq [
      Token (Literal "option");
      Token (Name "option_name");
      Token (Literal "=");
      Token (Name "constant");
      Token (Literal ";");
    ];
  );
  "reserved",
  Some (
    Seq [
      Token (Literal "reserved");
      Alt [|
        Token (Name "ranges");
        Token (Name "field_names");
      |];
      Token (Literal ";");
    ];
  );
  "field_options",
  Some (
    Seq [
      Token (Name "field_option");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "field_option");
        ];
      );
    ];
  );
  "enum_field",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal "=");
      Opt (
        Token (Literal "-");
      );
      Token (Name "int_lit");
      Opt (
        Seq [
          Token (Literal "[");
          Token (Name "enum_value_option");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "enum_value_option");
            ];
          );
          Token (Literal "]");
        ];
      );
      Token (Literal ";");
    ];
  );
  "rpc",
  Some (
    Seq [
      Token (Literal "rpc");
      Token (Name "rpc_name");
      Token (Literal "(");
      Opt (
        Token (Literal "stream");
      );
      Token (Name "message_or_enum_type");
      Token (Literal ")");
      Token (Literal "returns");
      Token (Literal "(");
      Opt (
        Token (Literal "stream");
      );
      Token (Name "message_or_enum_type");
      Token (Literal ")");
      Alt [|
        Seq [
          Token (Literal "{");
          Repeat (
            Alt [|
              Token (Name "option");
              Token (Name "empty_statement");
            |];
          );
          Token (Literal "}");
        ];
        Token (Literal ";");
      |];
    ];
  );
  "field",
  Some (
    Seq [
      Opt (
        Token (Literal "optional");
      );
      Opt (
        Token (Literal "repeated");
      );
      Token (Name "type");
      Token (Name "identifier");
      Token (Literal "=");
      Token (Name "field_number");
      Opt (
        Seq [
          Token (Literal "[");
          Token (Name "field_options");
          Token (Literal "]");
        ];
      );
      Token (Literal ";");
    ];
  );
  "map_field",
  Some (
    Seq [
      Token (Literal "map");
      Token (Literal "<");
      Token (Name "key_type");
      Token (Literal ",");
      Token (Name "type");
      Token (Literal ">");
      Token (Name "identifier");
      Token (Literal "=");
      Token (Name "field_number");
      Opt (
        Seq [
          Token (Literal "[");
          Token (Name "field_options");
          Token (Literal "]");
        ];
      );
      Token (Literal ";");
    ];
  );
  "oneof_field",
  Some (
    Seq [
      Token (Name "type");
      Token (Name "identifier");
      Token (Literal "=");
      Token (Name "field_number");
      Opt (
        Seq [
          Token (Literal "[");
          Token (Name "field_options");
          Token (Literal "]");
        ];
      );
    ];
  );
  "enum_body",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "option");
          Token (Name "enum_field");
          Token (Name "empty_statement");
        |];
      );
      Token (Literal "}");
    ];
  );
  "service",
  Some (
    Seq [
      Token (Literal "service");
      Token (Name "service_name");
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "option");
          Token (Name "rpc");
          Token (Name "empty_statement");
        |];
      );
      Token (Literal "}");
    ];
  );
  "oneof",
  Some (
    Seq [
      Token (Literal "oneof");
      Token (Name "identifier");
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "option");
          Token (Name "oneof_field");
          Token (Name "empty_statement");
        |];
      );
      Token (Literal "}");
    ];
  );
  "enum",
  Some (
    Seq [
      Token (Literal "enum");
      Token (Name "enum_name");
      Token (Name "enum_body");
    ];
  );
  "message",
  Some (
    Seq [
      Token (Literal "message");
      Token (Name "message_name");
      Token (Name "message_body");
    ];
  );
  "message_body",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "field");
          Token (Name "enum");
          Token (Name "message");
          Token (Name "option");
          Token (Name "oneof");
          Token (Name "map_field");
          Token (Name "reserved");
          Token (Name "empty_statement");
        |];
      );
      Token (Literal "}");
    ];
  );
  "source_file",
  Some (
    Seq [
      Token (Name "syntax");
      Opt (
        Repeat (
          Alt [|
            Token (Name "import");
            Token (Name "package");
            Token (Name "option");
            Token (Name "enum");
            Token (Name "message");
            Token (Name "service");
            Token (Name "empty_statement");
          |];
        );
      );
    ];
  );
]

let trans_key_type ((kind, body) : mt) : CST.key_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Int32 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Int64 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Uint32 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Uint64 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Sint32 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Sint64 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Fixed32 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Fixed64 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Sfixed32 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Sfixed64 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Bool (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Str (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_empty_statement ((kind, body) : mt) : CST.empty_statement =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_octal_lit ((kind, body) : mt) : CST.octal_lit =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_syntax ((kind, body) : mt) : CST.syntax =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_decimal_lit ((kind, body) : mt) : CST.decimal_lit =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_prec_p1_pat_3a2a380 ((kind, body) : mt) : CST.imm_tok_prec_p1_pat_3a2a380 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_false_ ((kind, body) : mt) : CST.false_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_hex_lit ((kind, body) : mt) : CST.hex_lit =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_float_lit ((kind, body) : mt) : CST.float_lit =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_prec_p1_pat_dc28280 ((kind, body) : mt) : CST.imm_tok_prec_p1_pat_dc28280 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_escape_sequence ((kind, body) : mt) : CST.escape_sequence =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_true_ ((kind, body) : mt) : CST.true_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_comment ((kind, body) : mt) : CST.comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_identifier ((kind, body) : mt) : CST.identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_int_lit ((kind, body) : mt) : CST.int_lit =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Deci_lit (
            trans_decimal_lit (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Octal_lit (
            trans_octal_lit (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Hex_lit (
            trans_hex_lit (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_string_ ((kind, body) : mt) : CST.string_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `DQUOT_rep_choice_imm_tok_prec_p1_pat_3a2a380_DQUOT (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Imm_tok_prec_p1_pat_3a2a380 (
                            trans_imm_tok_prec_p1_pat_3a2a380 (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Esc_seq (
                            trans_escape_sequence (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `SQUOT_rep_choice_imm_tok_prec_p1_pat_dc28280_SQUOT (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Imm_tok_prec_p1_pat_dc28280 (
                            trans_imm_tok_prec_p1_pat_dc28280 (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Esc_seq (
                            trans_escape_sequence (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_bool_ ((kind, body) : mt) : CST.bool_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `True (
            trans_true_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `False (
            trans_false_ (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_full_ident ((kind, body) : mt) : CST.full_ident =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.opt
              (fun v ->
                Run.repeat
                  (fun v ->
                    (match v with
                    | Seq [v0; v1] ->
                        (
                          Run.trans_token (Run.matcher_token v0),
                          trans_identifier (Run.matcher_token v1)
                        )
                    | _ -> assert false
                    )
                  )
                  v
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_enum_name ((kind, body) : mt) : CST.enum_name =
  match body with
  | Children v ->
      trans_identifier (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_field_names ((kind, body) : mt) : CST.field_names =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_identifier (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_rpc_name ((kind, body) : mt) : CST.rpc_name =
  match body with
  | Children v ->
      trans_identifier (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_message_name ((kind, body) : mt) : CST.message_name =
  match body with
  | Children v ->
      trans_identifier (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_service_name ((kind, body) : mt) : CST.service_name =
  match body with
  | Children v ->
      trans_identifier (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_message_or_enum_type ((kind, body) : mt) : CST.message_or_enum_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_identifier (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_field_number ((kind, body) : mt) : CST.field_number =
  match body with
  | Children v ->
      trans_int_lit (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_range ((kind, body) : mt) : CST.range =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_int_lit (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Int_lit (
                            trans_int_lit (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Max (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_import ((kind, body) : mt) : CST.import =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Weak (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Public (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_string_ (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_option_name ((kind, body) : mt) : CST.option_name =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `LPAR_full_id_RPAR (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_full_ident (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_identifier (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_block_lit ((kind, body) : mt) : CST.block_lit =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3] ->
                    (
                      trans_identifier (Run.matcher_token v0),
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v1
                      ,
                      (match v2 with
                      | Alt (0, v) ->
                          `Cst (
                            trans_constant (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `LBRACK_cst_rep_COMMA_cst_RBRACK (
                            (match v with
                            | Seq [v0; v1; v2; v3] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  trans_constant (Run.matcher_token v1),
                                  Run.repeat
                                    (fun v ->
                                      (match v with
                                      | Seq [v0; v1] ->
                                          (
                                            Run.trans_token (Run.matcher_token v0),
                                            trans_constant (Run.matcher_token v1)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                    v2
                                  ,
                                  Run.trans_token (Run.matcher_token v3)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `COMMA (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `SEMI (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                        v3
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constant ((kind, body) : mt) : CST.constant =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Full_id (
            trans_full_ident (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Opt_choice_DASH_int_lit (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.opt
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `DASH (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `PLUS (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v0
                  ,
                  trans_int_lit (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Opt_choice_DASH_float_lit (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.opt
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `DASH (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `PLUS (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v0
                  ,
                  trans_float_lit (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Str (
            trans_string_ (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Bool (
            trans_bool_ (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Blk_lit (
            trans_block_lit (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_package ((kind, body) : mt) : CST.package =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_full_ident (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_type_ ((kind, body) : mt) : CST.type_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Double (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Float (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Int32 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Int64 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Uint32 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Uint64 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Sint32 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Sint64 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Fixed32 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Fixed64 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Sfixed32 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Sfixed64 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Bool (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `Str (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `Bytes (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `Mess_or_enum_type (
            trans_message_or_enum_type (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_ranges ((kind, body) : mt) : CST.ranges =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_range (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_range (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_field_option ((kind, body) : mt) : CST.field_option =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_option_name (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_constant (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_enum_value_option ((kind, body) : mt) : CST.enum_value_option =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_option_name (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_constant (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_option_ ((kind, body) : mt) : CST.option_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_option_name (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_constant (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_reserved ((kind, body) : mt) : CST.reserved =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Ranges (
                  trans_ranges (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Field_names (
                  trans_field_names (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_field_options ((kind, body) : mt) : CST.field_options =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_field_option (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_field_option (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_enum_field ((kind, body) : mt) : CST.enum_field =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            trans_int_lit (Run.matcher_token v3),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_enum_value_option (Run.matcher_token v1),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_enum_value_option (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v2
                      ,
                      Run.trans_token (Run.matcher_token v3)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_rpc ((kind, body) : mt) : CST.rpc =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8; v9; v10; v11] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_rpc_name (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            trans_message_or_enum_type (Run.matcher_token v4),
            Run.trans_token (Run.matcher_token v5),
            Run.trans_token (Run.matcher_token v6),
            Run.trans_token (Run.matcher_token v7),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v8
            ,
            trans_message_or_enum_type (Run.matcher_token v9),
            Run.trans_token (Run.matcher_token v10),
            (match v11 with
            | Alt (0, v) ->
                `LCURL_rep_choice_opt_RCURL (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Alt (0, v) ->
                                `Opt (
                                  trans_option_ (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Empty_stmt (
                                  trans_empty_statement (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_field ((kind, body) : mt) : CST.field =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            trans_type_ (Run.matcher_token v2),
            trans_identifier (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4),
            trans_field_number (Run.matcher_token v5),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_field_options (Run.matcher_token v1),
                      Run.trans_token (Run.matcher_token v2)
                    )
                | _ -> assert false
                )
              )
              v6
            ,
            Run.trans_token (Run.matcher_token v7)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_map_field ((kind, body) : mt) : CST.map_field =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8; v9; v10] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_key_type (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_type_ (Run.matcher_token v4),
            Run.trans_token (Run.matcher_token v5),
            trans_identifier (Run.matcher_token v6),
            Run.trans_token (Run.matcher_token v7),
            trans_field_number (Run.matcher_token v8),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_field_options (Run.matcher_token v1),
                      Run.trans_token (Run.matcher_token v2)
                    )
                | _ -> assert false
                )
              )
              v9
            ,
            Run.trans_token (Run.matcher_token v10)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_oneof_field ((kind, body) : mt) : CST.oneof_field =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_type_ (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_field_number (Run.matcher_token v3),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_field_options (Run.matcher_token v1),
                      Run.trans_token (Run.matcher_token v2)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_enum_body ((kind, body) : mt) : CST.enum_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Opt (
                      trans_option_ (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Enum_field (
                      trans_enum_field (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_service ((kind, body) : mt) : CST.service =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_service_name (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Opt (
                      trans_option_ (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Rpc (
                      trans_rpc (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_oneof ((kind, body) : mt) : CST.oneof =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Opt (
                      trans_option_ (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Oneof_field (
                      trans_oneof_field (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_enum ((kind, body) : mt) : CST.enum =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_enum_name (Run.matcher_token v1),
            trans_enum_body (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_message ((kind, body) : mt) : CST.message =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_message_name (Run.matcher_token v1),
            trans_message_body (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_message_body ((kind, body) : mt) : CST.message_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Field (
                      trans_field (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Enum (
                      trans_enum (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Mess (
                      trans_message (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Opt (
                      trans_option_ (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `Oneof (
                      trans_oneof (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Map_field (
                      trans_map_field (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Rese (
                      trans_reserved (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_source_file ((kind, body) : mt) : CST.source_file =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_syntax (Run.matcher_token v0),
            Run.opt
              (fun v ->
                Run.repeat
                  (fun v ->
                    (match v with
                    | Alt (0, v) ->
                        `Import (
                          trans_import (Run.matcher_token v)
                        )
                    | Alt (1, v) ->
                        `Pack (
                          trans_package (Run.matcher_token v)
                        )
                    | Alt (2, v) ->
                        `Opt (
                          trans_option_ (Run.matcher_token v)
                        )
                    | Alt (3, v) ->
                        `Enum (
                          trans_enum (Run.matcher_token v)
                        )
                    | Alt (4, v) ->
                        `Mess (
                          trans_message (Run.matcher_token v)
                        )
                    | Alt (5, v) ->
                        `Serv (
                          trans_service (Run.matcher_token v)
                        )
                    | Alt (6, v) ->
                        `Empty_stmt (
                          trans_empty_statement (Run.matcher_token v)
                        )
                    | _ -> assert false
                    )
                  )
                  v
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

(*
   Costly operation that translates a whole tree or subtree.

   The first pass translates it into a generic tree structure suitable
   to guess which node corresponds to each grammar rule.
   The second pass is a translation into a typed tree where each grammar
   node has its own type.

   This function is called:
   - once on the root of the program after removing extras
     (comments and other nodes that occur anywhere independently from
     the grammar);
   - once of each extra node, resulting in its own independent tree of type
     'extra'.
*)
let translate_tree src node trans_x =
  let matched_tree = Run.match_tree children_regexps src node in
  Option.map trans_x matched_tree


let translate_extra src (node : Tree_sitter_output_t.node) : CST.extra option =
  match node.type_ with
  | "comment" ->
      (match translate_tree src node trans_comment with
      | None -> None
      | Some x -> Some (`Comment (Run.get_loc node, x)))
  | _ -> None

let translate_root src root_node =
  translate_tree src root_node trans_source_file

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let opt_program, extras =
     Run.translate
       ~extras
       ~translate_root:(translate_root src)
       ~translate_extra:(translate_extra src)
       orig_root_node
  in
  Parsing_result.create src opt_program extras errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

